package com.patterns.结构型.bridge;


/**
 * 将抽象化与实现化解耦，使得二者可以独立变化
 * 
 * 由于实际的需要，某个类具有两个或两个以上的维度变化，如果只是用继承将无法实现这种需要，或者使得设计变得相当臃肿。
 * 桥接模式的做法是把变化部分抽象出来，使变化部分与主类分离开来，从而将多个维度的变化彻底分离。最后，提供一个管理类来组合不同维度上的变化，通过这种组合来满足业务的需要。
 * 
 * 通过对象组合的方式，Bridge 模式把两个角色之间的继承关系改为了耦合的关系，从而使这两者可以从容自若的各自独立的变化，这也是Bridge模式的本意
 */
public abstract class Bridge {
	private Sourceable source;  
	
	public Bridge(Sourceable source) {
		this.setSource(source);
	}
	
    public void method(){  
        source.method();  
    }  
      
    public Sourceable getSource() {  
        return source;  
    }  
  
    public void setSource(Sourceable source) {  
        this.source = source;  
    } 
}
